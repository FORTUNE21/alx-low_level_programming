!<arch>
0-isupper.c/    0           0     0     644     302       `
#include "main.h"

/**
 * _isupper - This function checks for uppercase characters
 * @c: is the character
 *
 * Return: 1 if c is uppercase and 0 if otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else if (c <= 'z')
	{
		return (0);
	}
	else
	{
		return (0);
	}

}
0-memset.c/     0           0     0     644     294       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte.
 * @s: pointer to put the constant
 * @b: constant
 * @n: max bytes to use
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; n > 0; i++, n--)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     313       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 *@dest: pointer destination
 *@src: pointer source
 *Return: void
 */
char *_strcat(char *dest, char *src)
{
	int a = -1, i;

	for (i = 0; dest[i] != '\0'; i++)
	;

	do {
		a++;
		dest[i] = src[a];
		i++;
	} while (src[a] != '\0');

	return (dest);
}

100-atoi.c/     0           0     0     644     371       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: the string to be converted
 *
 * Return: num * sign
 */
int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;

		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');

		else if (num > 0)
			break;

	} while (*s++);

	return (num * sign);
}

1-isdigit.c/    0           0     0     644     251       `
#include "main.h"

/**
 * _isdigit - This function checks for digits from 0-9
 * @c: is the character
 *
 * Return: 1 if c is a digit and 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     275       `

/**
 * _memcpy - copies memory area
 * @dest: memory area
 * @src: source
 * @n: length of src
 *
 * Return: pointer to dest.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{

	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     460       `
#include "main.h"

/**
 * _strncat - concatenates n bytes of two strings
 * @dest: pointer destination
 * @src: pointer source
 * @n: number of bytes
 * Return: void
*/

char *_strncat(char *dest, char *src, int n)
{

	int dest_len, i;

	for (dest_len = 0; dest[dest_len] != '\0'; dest_len++)
	;

	for (i = 0; i < n && src[i] != '\0'; i++)
	dest[dest_len + i] = src[i];

	/*should end with a end of string char*/
	dest[dest_len + i] = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     284       `
#include "main.h"

/**
 * _strchr - fills memory with a constant byte.
 * @s: pointer to put the constant
 * @c: constant
 * Return: s
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'  ; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}
2-strlen.c/     0           0     0     644     253       `
#include <stdio.h>
#include "main.h"

/**
 * _strlen - This function returns the length of a string
 * @s: pointer with the address value
 *
 * Return: void
 */
int _strlen(char *s)
{
	int i = 0;

	while (*s != '\0')
	{
		i++;
		s++;
	}

	return (i);
}

2-strncpy.c/    0           0     0     644     371       `
#include "main.h"

/**
 * _strncpy - copies the string pointed to by src.
 * @dest: pointer to the buffer.
 * @src: pointer to the source string.
 * @n: length of src.
 * Return: char
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for (; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.c/    0           0     0     644     246       `
#include "main.h"

/**
 * _islower - This function checks for lowercase character
 *
 * @c: ia an ascii character
 *
 * Return: 1 if lowercase
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

3-puts.c/       0           0     0     644     268       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - This function prints a string
 * to the standard output
 * @str: pointer with the address value
 *
 * Return: void
 */
void _puts(char *str)
{

	while (*str != '\0')
	{
		_putchar(*str++);
	}

		_putchar('\n');
}


3-strcmp.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: string 1
 * @s2: string 2
 * Return: 1 if true, 0 if false
 */

int _strcmp(char *s1, char *s2)
{

	int equal = 0;

	while (*s1)
	{
		if (*s1 != *s2)
		{
			equal = ((int)*s1 - 48) - ((int)*s2 - 48);
			break;
		}
		s1++;
		s2++;
	}

	return (equal);
}
3-strspn.c/     0           0     0     644     351       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 *
 * @s: string.
 * @accept: bytes.
 * Return: unsigned int.
 */

unsigned int _strspn(char *s, char *accept)

{
	unsigned int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != s[i]; j++)
		{
			if (accept[j] == '\0')
				return (i);
		}
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     270       `
#include "main.h"

/**
 * _isalpha - This function checks for
 * alphabetic character
 *
 * @c: character
 *
 * Return: 1 if c is lowercase
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
4-strpbrk.c/    0           0     0     644     485       `
#include "main.h"

/**
 * _strpbrk - Search a string for any of a set of bytes.
 * @s: string
 * @accept: string to match
 * Return: Pointer to the byte in `s` that matches one of the bytes in `accept`
 * or NULL if no such byte is found.
 */

char *_strpbrk(char *s, char *accept)
{

	int i, j;
	char *p;

	i = 0;
	while (s[i] != '\0')
	{
		j = 0;
		while (accept[j] != '\0')
		{
			if (accept[j] == s[i])
			{
				p = &s[i];
				return (p);
			}
			j++;
		}
		i++;
	}
	return (0);
}

5-strstr.c/     0           0     0     644     425       `
#include "main.h"
#include <stdio.h>

/**
 * _strstr - description
 * @haystack: string
 * @needle: pointer
 * Return: pointer
 */

char *_strstr(char *haystack, char *needle)
{
int i, j;

for (i = 0; haystack[i] > '\0'; i++)
{
	for (j = i; haystack[j] > '\0' && needle[j - i] > '\0'; j++)
	{
		if (haystack[j] != needle[j - i])
		{
			break;
		}
	}
	if (needle[j - i] == '\0')
	{
		return (haystack + i);
	}
}
return (0);
}

6-abs.c/        0           0     0     644     264       `
#include "main.h"

/**
 * _abs - This function computes the absolute
 *  value of an integer
 *
 *  @r: r is an ascii character
 *
 *  Return: always r (success) or -r (negative)
 */

int _abs(int r)
{
	if (r >= 0)
	{
		return (r);
	}
	else
	{
		return (-r);
	}
}
9-strcpy.c/     0           0     0     644     296       `
#include "main.h"

/**
 * *_strcpy - function copies string pointed to by src
 * @dest: char type string
 * @src: char type string
 * Return: pointer to 'dest'
 */
char *_strcpy(char *dest, char *src)
{
	int i = -1;

	do {
		i++;
		dest[i] = src[i];
	} while (src[i] != '\0');

	return (dest);
}
_putchar.c/     0           0     0     644     246       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: on success 1
 * on error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
